import gpiod
import time
import spidev

class SpiToTeensy:
    def __init__(self, cs_pin, spi_instance):
        self.ChipSelectPin = cs_pin
        self.ChipSelect = gpiod.Chip('gpiochip4')
        self.SlaveLine = self.ChipSelect.get_line(self.ChipSelectPin)
        self.start_bit = 57005
        self.slave_id = 4660
        self.telegram_length = 9
        self.function_call = 4015
        self.packet_id = 5472
        self.checksum = 0
        self.bus = 0
        self.device = 1
        self.spi = spi_instance
        self.telegram_message_8_bit = []
        self.telegram_message_full_size = []
        self.telegram_inbound = []
        self.message_bit = []

    def SPI_setup(self):
        self.SlaveLine.request(consumer='self.SlaveLine', type=gpiod.LINE_REQ_DIR_OUT)
        self.spi.open(self.bus, self.device)
        self.spi.max_speed_hz = 2000000
        self.spi.mode = 0
        self.checksum = 0
        self.telegram_inbound = []

    def SPI_send(self, command, motor, step, direction, speed, ramp, spare):
        self.message_bit = [0] * 8
        self.message_bit[0] = command
        self.message_bit[1] = motor
        self.message_bit[2] = int(step)
        self.message_bit[3] = int(step >> 16)
        self.message_bit[4] = direction
        self.message_bit[5] = speed
        self.message_bit[6] = ramp
        self.message_bit[7] = spare
        self.telegram_construct(self.message_bit)
        self.telegram_checksum()  # Ensure checksum is calculated after constructing the telegram
        self.telegram_send()  # Send the telegram

    def telegram_construct(self, user_data):
        self.telegram_message_full_size = [
            self.start_bit, self.slave_id, self.telegram_length,
            self.function_call, self.packet_id,
            *user_data
        ]

    def telegram_checksum(self):
        self.checksum = 0
        for i in range(13):
            if i > 3:
                self.checksum ^= self.telegram_message_full_size[i]
        self.telegram_message_full_size.append(self.checksum)

        self.telegram_message_8_bit = []
        for i in self.telegram_message_full_size:
            self.telegram_message_8_bit.append(i >> 8)
            self.telegram_message_8_bit.append(i & 0xFF)

    def telegram_send(self):
        print(self.telegram_message_8_bit)
        try:
            self.spi.open(self.bus, self.device)
            self.SlaveLine.set_value(0)
            self.spi.writebytes(self.telegram_message_8_bit)  # Use xfer2 to send and receive in one call
            self.telegram_inbound = self.spi.readbytes(20)
            self.SlaveLine.set_value(1)
            del self.telegram_inbound[:4]
            print(self.telegram_inbound, "slave 1")
            print((self.telegram_inbound[0]<<8)+self.telegram_inbound[1]+(self.telegram_inbound[2]<<24)+(self.telegram_inbound[3]<<16))
            self.checksum=0
            self.telegram_message_8_bit=[]
            self.spi.close()
            self.telegram_message_full_size = []
            
        finally:
            self.spi.close()

# Example of using the class
if __name__ == "__main__":
    spi1 = spidev.SpiDev()
    controller_1 = SpiToTeensy(24, spi1)
    controller_2 = SpiToTeensy(23, spi1)
    controller_1.SPI_setup()
    controller_2.SPI_setup()
    controller_1.SPI_send(12, 1, 5663, 1, 200, 1, 0)

        #controller_1.SPI_send(12, 2, 4000, 1, 200, 0, 0)
        #controller_1.SPI_send(12, 0, 10000, flop, 400, 0, 0)



