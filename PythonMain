import gpiod
import spidev

class SpiToTeensy:
    def __init__(self, cs_pin, bus, device, motor):
        self.ChipSelectPin = cs_pin
        self.ChipSelectIO = gpiod.Chip('gpiochip4').get_line(self.ChipSelectPin)
        self.start_bit = 57005
        self.slave_id = 4660
        self.telegram_length = 9
        self.function_call = 4015
        self.packet_id = 5472
        self.checksum = 0
        self.spi = spidev.SpiDev()
        self.bus = bus
        self.device = device
        self.motor = motor
        self.message_bit = [0] * 8  # Initialize message_bit as a class variable
        self.message_bit[1] = self.motor  # Set motor number in message_bit[1]
        self.telegram_message_8_bit = []
        self.telegram_message_full_size = []
        self.telegram_inbound = []
        self.ChipSelectIO.request(consumer='cs_pin', type=gpiod.LINE_REQ_DIR_OUT)

        # Open SPI connection on specified bus and device
        self.spi.open(self.bus, self.device)
        self.spi.max_speed_hz = 2000000
        self.spi.mode = 0

    def SPI_send(self, command, step, direction, speed, ramp, spare):
        self.message_bit[0] = command
        self.message_bit[2] = int(step)
        self.message_bit[3] = int(step >> 16)
        self.message_bit[4] = direction
        self.message_bit[5] = speed
        self.message_bit[6] = ramp
        self.message_bit[7] = spare

        # Build Telegram
        self.telegram_message_full_size = [
            self.start_bit, self.slave_id, self.telegram_length,
            self.function_call, self.packet_id,
            *self.message_bit
        ]

        # CHECKSUM
        self.checksum = 0
        for i in range(13):
            if i > 3:
                self.checksum ^= self.telegram_message_full_size[i]
        self.telegram_message_full_size.append(self.checksum)

        # Convert to 8-bit format
        self.telegram_message_8_bit = []
        for value in self.telegram_message_full_size:
            self.telegram_message_8_bit.append(value >> 8)
            self.telegram_message_8_bit.append(value & 0xFF)

        # Send Telegram
        try:
            self.ChipSelectIO.set_value(0)
            self.spi.writebytes(self.telegram_message_8_bit)
            self.telegram_inbound = self.spi.readbytes(20)
            del self.telegram_inbound[:4]
            print(self.telegram_inbound, f"slave on pin {self.ChipSelectPin}")
            self.ChipSelectIO.set_value(1)
        finally:
            self.spi.close()

# Example of using the class
if __name__ == "__main__":
    controller_1 = SpiToTeensy(cs_pin=23, bus=0, device=1, motor=2)
    controller_1.SPI_send(command=12, step=5663, direction=1, speed=200, ramp=1, spare=0)

    # Instantiate a second controller with a different motor number
    controller_2 = SpiToTeensy(cs_pin=24, bus=0, device=1, motor=0)
    Controller_2.SPI_send(command=12, step=2000, direction=0, speed=500, ramp=1, spare=0)
    controller_3 = SpiToTeensy(cs_pin=24, bus=0, device=1, motor=1)
    controller_3.SPI_send(command=12, step=4000, direction=0, speed=500, ramp=1, spare=0)
    controller_4 = SpiToTeensy(cs_pin=24, bus=0, device=1, motor=2)
    controller_4.SPI_send(command=12, step=6000, direction=0, speed=500, ramp=1, spare=0)
