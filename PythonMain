import gpiod
import spidev

class SpiToTeensy:
    def __init__(self, cs_pin, spi_instance):
        self.ChipSelectPin = cs_pin
        self.ChipSelectIO = gpiod.Chip('gpiochip4').get_line(self.ChipSelectPin)
        self.start_bit = 57005
        self.slave_id = 4660
        self.telegram_length = 9
        self.function_call = 4015
        self.packet_id = 5472
        self.checksum = 0
        self.spi = spi_instance
        self.telegram_message_8_bit = []
        self.telegram_message_full_size = []
        self.telegram_inbound = []
        self.ChipSelectIO.request(consumer='cs_pin', type=gpiod.LINE_REQ_DIR_OUT)

    def SPI_send(self, command, motor, step, direction, speed, ramp, spare):
        message_bit = [0] * 8
        message_bit[0] = command
        message_bit[1] = motor
        message_bit[2] = int(step)
        message_bit[3] = int(step >> 16)
        message_bit[4] = direction
        message_bit[5] = speed
        message_bit[6] = ramp
        message_bit[7] = spare
        # Build Telegram
        self.telegram_message_full_size = [
            self.start_bit, self.slave_id, self.telegram_length,
            self.function_call, self.packet_id,
            *message_bit
        ]

        # CHECKSUM
        self.checksum = 0
        for i in range(13):
            if i > 3:
                self.checksum ^= self.telegram_message_full_size[i]
        self.telegram_message_full_size.append(self.checksum)

        self.telegram_message_8_bit = []
        for i in self.telegram_message_full_size:
            self.telegram_message_8_bit.append(i >> 8)
            self.telegram_message_8_bit.append(i & 0xFF)

        # Send Telegram
        try:
            self.spi.open(0, 1)  # Assuming bus=0, device=1 as per the main setup
            self.ChipSelectIO.set_value(0)
            self.spi.writebytes(self.telegram_message_8_bit)
            self.telegram_inbound = self.spi.readbytes(20)
            del self.telegram_inbound[:4]
            print(self.telegram_inbound, "slave 1")
            self.ChipSelectIO.set_value(1)
        finally:
            self.spi.close()


# Example of using the class
if __name__ == "__main__":
    spi = spidev.SpiDev()
    spi.max_speed_hz = 2000000
    spi.mode = 0
    controller_1 = SpiToTeensy(23, spi)
    controller_1.SPI_send(12, 1, 5663, 1, 200, 1, 0)
