import gpiod
import time
import spidev
import random

class SpiToTeensy:
    def __init__(self, cs_pin,spi_instance):
        
        self.ChipSelectPin = cs_pin
        self.ChipSelect = gpiod.Chip('gpiochip4')
        self.SlaveLine = self.ChipSelect.get_line(self.ChipSelectPin)
        self.start_bit = 57005
        self.slave_id = 4660
        self.telegram_length = 9
        self.function_call = 4015
        self.packet_id = 5472
        self.checksum = 0
        self.bus = 0
        self.device = 1
        self.spi = spi_instance
        self.telegram_message_8_bit=[]
        self.telegram_message_full_size=[]
        self.telegram_inbound = []
    def SPI_setup(self):
        self.SlaveLine.request(consumer='slave_2', type=gpiod.LINE_REQ_DIR_OUT)
        self.spi.open(self.bus, self.device)
        self.spi.max_speed_hz = 2000000
        self.spi.mode = 0
        self.checksum = 0
        self.telegram_inbound = []

    def SPI_send(self,command,motor,step,direction,speed,ramp,spare):
        function_call = 4015
        message_bit =[0,0,0,0,0,0,0,0]
        message_bit[0] = command
        message_bit[1] = motor
        message_bit[2] = int(step)
        message_bit[3] = int(step>>16)
        message_bit[4] = direction
        message_bit[5] = speed
        message_bit[6] = ramp
        message_bit[7] = spare
        telegram_construct(message_bit)
        
    def telegram_construct(self,user_data):
        self.telegram_message_full_size = [self.start_bit, self.slave_id, self.telegram_length, self.function_call, self.packet_id, user_data[0],
                            user_data[1], user_data[2], user_data[3], user_data[4], user_data[5], user_data[6],user_data[7]]
        
    def telegram_checksum(self):
        for i in range(13):
            if i > 3:
                self.checksum ^= self.telegram_message_full_size[i]
        self.telegram_message_full_size.append(self.checksum)
        for i in self.telegram_message_full_size:
            self.telegram_message_8_bit.append(int(i) >> 8)
            self.telegram_message_8_bit.append(int(i) & 0b0000000011111111)
        telegram_send()
    def telegram_send(self):
        try:
            self.spi.open(self.bus, self.device)
            self.SlaveLine.set_value(0)
            self.spi.writebytes(telegram)
            self.telegram_inbound = self.spi.readbytes(20)
            del self.telegram_inbound[:4]
            print(self.telegram_inbound, "slave 1")
            self.SlaveLine.set_value(1)
            self.spi.close()
            self.checksum = 0
            telegram_message_8_bit = []
                        
        finally:
            spi.close()

        
    
# Example of using the class template
if __name__ == "__main__":
    spi = spidev.SpiDev()
    controller_1 = SpiToTeensy(23,spi)
    controller_1.SPI_setup()
    controller_1.SPI_send(12,0,10000,1,200,1,0)
