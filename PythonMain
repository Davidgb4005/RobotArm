import gpiod
import spidev
import time
from gpiozero import LED

class SpiToTeensy:
    def __init__(self, cs_pin, bus, device):
        self.ChipSelectPin = LED(cs_pin)
        self.start_bit = 57005
        self.slave_id = 4660
        self.telegram_length = 9
        self.function_call = 4015
        self.packet_id = 5472
        self.checksum = 0
        self.spi = spidev.SpiDev()
        self.bus = bus
        self.device = device
        self.message_bit = [0] * 8
        self.telegram_message_8_bit = []
        self.telegram_message_full_size = []
        self.telegram_inbound = []
        self.telegram_parsed = [0,0,0,0,0,0,0,0]
        self.cs_pin=cs_pin
        
    def int32(self, val):
        val=val & 0xffffffff
        return (val ^ 0x80000000) - 0x80000000
    def int16(self, val):
        val=val & 0xffff
        return (val ^ 0x8000) - 0x8000       
    def open_spi(self):
        self.spi.open(self.bus, self.device)
        self.spi.max_speed_hz = 50000
        self.spi.mode = 0

    def SPI_send(self, command, motor, step, direction, speed, ramp, spare):
        self.message_bit[0] = command
        self.message_bit[1] = motor
        self.message_bit[2] = int(step)
        self.message_bit[3] = int(step) >> 16
        self.message_bit[4] = direction
        self.message_bit[5] = speed
        self.message_bit[6] = ramp
        self.message_bit[7] = spare

        self.telegram_message_full_size = [
            self.start_bit, self.slave_id, self.telegram_length,
            self.function_call, self.packet_id,
            *self.message_bit
        ]

        self.checksum = 0
        for i in range(13):
            if i > 3:
                self.checksum ^= self.telegram_message_full_size[i]
        self.telegram_message_full_size.append(self.checksum)

        self.telegram_message_8_bit = []
        for value in self.telegram_message_full_size:
            self.telegram_message_8_bit.append(value >> 8)
            self.telegram_message_8_bit.append(value & 0xFF)

        self.ChipSelectPin.off()
        self.spi.writebytes(self.telegram_message_8_bit)
        self.telegram_inbound = self.spi.readbytes(20)
        del self.telegram_inbound[:4]
        self.telegram_parsed[0]=self.int16((self.telegram_inbound[0]<<8)+self.telegram_inbound[1])
        self.telegram_parsed[1]=self.int32((self.telegram_inbound[2]<<8)+self.telegram_inbound[3]+(self.telegram_inbound[4]<<24)+(self.telegram_inbound[5]<<16))
        self.telegram_parsed[2]=self.int32((self.telegram_inbound[6]<<8)+self.telegram_inbound[7]+(self.telegram_inbound[8]<<24)+(self.telegram_inbound[9]<<16))
        self.telegram_parsed[3]=self.int16((self.telegram_inbound[10]<<8)+self.telegram_inbound[11])
        self.telegram_parsed[4]=self.int16((self.telegram_inbound[12]<<8)+self.telegram_inbound[13])
        self.telegram_parsed[5]=self.int16((self.telegram_inbound[14]<<8)+self.telegram_inbound[15])
        print(f"{self.telegram_parsed}" , self.cs_pin)
#        print(self.telegram_inbound, f"slave on pin {self.ChipSelectPin}, motor {motor}")
        self.ChipSelectPin.on()



    def close_spi(self):
        self.spi.close()

class Motor:
    def __init__(self, motor, full_rev_step, SPI_controller):
        self.motor_calc_position = 0
        self.motor_driver_position = 0
        self.motor_spare = 0
        self.motor_speed = 0
        self.motor_ramp = 0
        self.motor_step = 0
        self.motor_step_degree = 0
        self.motor_full_rev_step = full_rev_step
        self.motor_direction = 0
        self.motor = motor
        self.SPI_controller = SPI_controller

    def DriveMotor(self):
        self.SPI_controller.open_spi()
        self.SPI_controller.SPI_send(
            command=12, motor=self.motor, direction=self.motor_direction,
            speed=self.motor_speed, ramp=self.motor_ramp, spare=self.motor_spare,
            step=self.motor_step
        )
        self.ResetInput()
        self.SPI_controller.close_spi()
        
        
    def HomeMotor(self):
        self.SPI_controller.open_spi()
        self.SPI_controller.SPI_send(
            command=1, motor=self.motor, direction=self.motor_direction,
            speed=self.motor_speed, ramp=self.motor_ramp, spare=self.motor_spare,
            step=self.motor_step
        )
        
        
        self.ResetInput()
        self.SPI_controller.close_spi()
    def WorkOffsetMotor(self):
        self.SPI_controller.open_spi()
        self.SPI_controller.SPI_send(
            command=2, motor=self.motor, direction=self.motor_direction,
            speed=self.motor_speed, ramp=self.motor_ramp, spare=self.motor_spare,
            step=self.motor_step
        )
        
        self.ResetInput()
        self.SPI_controller.close_spi()

    def StatusMotor(self):
        self.SPI_controller.open_spi()
        self.ResetInput()
        self.SPI_controller.SPI_send(
            command=8, motor=self.motor, direction=self.motor_direction,
            speed=self.motor_speed, ramp=self.motor_ramp, spare=self.motor_spare,
            step=self.motor_step
        )
        
        self.SPI_controller.close_spi()


    def ResetInput(self):
        self.motor_spare = 0
        self.motor_speed = 0
        self.motor_ramp = 0
        self.motor_step = 0
        self.motor_step_degree = 0
        self.motor_direction = 0

    def SetInput(self, speed, degree, ramp):
        self.motor_speed = speed
        self.motor_ramp = ramp
        self.motor_step_degree = abs(degree)
        self.motor_step = (self.motor_full_rev_step/360)*self.motor_step_degree
        self.motor_direction = 1 if degree > 0 else 0

# Example of using the class
if __name__ == "__main__":

    controller1 = SpiToTeensy(cs_pin=24, bus=0, device=0)
    #90deg = 62000 steps
    MotorKnuckle = Motor(0, 248000, SPI_controller=controller1)
    #360deg = 68500 steps
    SecondRotate = Motor(1, 68500, SPI_controller=controller1)
    #90deg = 76000
    MainArm = Motor(2, 304000, SPI_controller=controller1) 

    controller2 = SpiToTeensy(cs_pin=23, bus=0, device=1)
    #360deg = 245000
    MainPivot = Motor(2, 245000, SPI_controller=controller2)
    
#     
#     MotorKnuckle.SetInput(300,0, 100)
#     MotorKnuckle.DriveMotor()
#     SecondRotate.SetInput(200, 0, 100)
#     SecondRotate.DriveMotor()
#     MainArm.SetInput(300, 0, 100)
#     MainArm.DriveMotor()
#     MainPivot.SetInput(200, 0, 100)
#     MainPivot.DriveMotor()
    user_input=99
    while(user_input!=0):
        user_input = int(input())
        if user_input == 1:
            MotorKnuckle.SetInput(200,-0, 0)
            #MotorKnuckle.DriveMotor()
            SecondRotate.SetInput(500, -0, 0)
            #SecondRotate.DriveMotor()
            MainArm.SetInput(200, -26, 0)
            MainArm.DriveMotor()
            MainPivot.SetInput(300, 20, 0)
            #MainPivot.DriveMotor()
        if user_input == 2:
            #MotorKnuckle.WorkOffsetMotor()
            #SecondRotate.WorkOffsetMotor()
            MainArm.WorkOffsetMotor()
            #MainPivot.WorkOffsetMotor()



        if user_input == 3:
            #MotorKnuckle.HomeMotor()
            #SecondRotate.HomeMotor()
            MainArm.HomeMotor()
            #MainPivot.HomeMotor()

